----------------------练习1-----------------------
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using LL = long long;
/*
    问题分析：每个评估团从起始位置开始，以固定步长访问位置，直到结束位置。我们需要找到被访问奇数次的位置。
    关键观察：如果一个位置被访问奇数次，而其之前的所有位置被访问偶数次，那么这个位置就是我们要找的。
    二分查找：使用二分查找来定位这个位置。对于每个中间位置，计算所有评估团在该位置及之前的访问次数的奇偶性。
    奇偶性计算：对于每个评估团，计算其在中间位置及之前的访问次数，并累加到总次数中。通过异或操作快速判断总次数的奇偶性。
*/
struct Group {
    LL S, E, D;
    Group(LL s, LL e, LL d) : S(s), E(e), D(d) {}
};

// 计算在mid之前的位置，该小组的贡献的奇偶性
int compute_parity(const Group& g, LL mid) {
    if (g.S > mid) return 0;
    LL max_val = min(g.E, mid);
    if (g.D == 0) return (g.S <= mid) ? 1 : 0;
    LL k = (max_val - g.S) / g.D + 1;
    return k % 2;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int T;
    cin >> T;
    while (T--) {
        int N;
        cin >> N;
        vector<Group> groups;
        LL max_E = 0;
        for (int i = 0; i < N; ++i) {
            LL S, E, D;
            cin >> S >> E >> D;
            groups.emplace_back(S, E, D);
            max_E = max(max_E, E);
        }

        // 二分查找
        LL left = 0, right = max_E;
        LL pos = -1;
        while (left <= right) {
            LL mid = (left + right) / 2;
            int parity = 0;
            for (const auto& g : groups) {
                parity ^= compute_parity(g, mid);
            }
            if (parity) {
                pos = mid;
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }

        if (pos == -1) {
            cout << "Poor QIN Teng:(\n";
            continue;
        }

        // 统计出现次数
        int count = 0;
        for (const auto& g : groups) {
            if (g.D == 0) {
                if (g.S == pos && g.S <= g.E) count++;
            }
            else {
                if (pos >= g.S && pos <= g.E && (pos - g.S) % g.D == 0) count++;
            }
        }

        if (count % 2) {
            cout << pos << ' ' << count << '\n';
        }
        else {
            cout << "Poor QIN Teng:(\n";
        }
    }
    return 0;
}
----------------------练习2-----------------------
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;
/*
     超时了两个，不优化了
     问题转换：将问题转换为背包问题，其中每个字符串的价值是 'c' 的数量，重量是's' 和 'c' 的数量差。
    动态规划：使用动态规划维护每个可能的重量差对应的最大价值和。
    状态转移：对于每个字符串，更新所有可能的重量差对应的最大价值和。
     
*/

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    unordered_map<int, int> dp;
    dp[0] = 0;
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        int a = 0, b = 0;
        for (char c : s) {
            if (c == 's') a++;
            else if (c == 'c') b++;
        }
        int d = a - b;
        int val = b;
        unordered_map<int, int> tmp(dp);
        for (const auto& p : dp) {
            int new_d = p.first + d;
            int new_val = p.second + val;
            if (tmp.find(new_d) == tmp.end() || new_val > tmp[new_d]) {
                tmp[new_d] = new_val;
            }
        }
        dp = tmp;
    }
    cout << (dp.count(0) ? dp[0] : 0) << endl;
    return 0;
}
----------------------练习3-----------------------
/*
构建树结构：使用邻接表存储树的结构，并通过BFS确定每个节点的父节点和深度。
预处理倍增表：用于快速查询两个节点的最近公共祖先（LCA）。
预处理深度幂次方：预先计算每个节点深度的k次方值，以便快速查询。
预处理前缀和数组：存储每个节点到根节点的路径上所有节点深度的k次方和。
处理查询：利用预处理的信息快速计算路径上的深度k次方和。
*/
#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <cstring>
using namespace std;

const int MOD = 998244353;
const int MAXN = 300005;
const int LOG = 20;

vector<int> adj[MAXN];
int parent[MAXN], depth[MAXN];
int up[MAXN][LOG];
int pow_dk[MAXN][51];
int sum[MAXN][51];

int lca(int u, int v) {
    if (depth[u] < depth[v]) swap(u, v);
    int diff = depth[u] - depth[v];
    for (int j = LOG - 1; j >= 0; j--) {
        if (diff & (1 << j)) {
            u = up[u][j];
        }
    }
    if (u == v) return u;
    for (int j = LOG - 1; j >= 0; j--) {
        if (up[u][j] != up[v][j]) {
            u = up[u][j];
            v = up[v][j];
        }
    }
    return up[u][0];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // BFS to compute parent and depth
    queue<int> q;
    q.push(1);
    memset(parent, 0, sizeof(parent));
    parent[1] = 0;
    depth[1] = 0;
    while (!q.empty()) {
        int u = q.front(); q.pop();
        for (int v : adj[u]) {
            if (v != parent[u] && parent[v] == 0) {
                parent[v] = u;
                depth[v] = depth[u] + 1;
                q.push(v);
            }
        }
    }

    // Preprocess up table for LCA
    for (int i = 1; i <= n; i++) {
        up[i][0] = parent[i];
    }
    for (int j = 1; j < LOG; j++) {
        for (int i = 1; i <= n; i++) {
            if (up[i][j - 1] != 0) {
                up[i][j] = up[up[i][j - 1]][j - 1];
            }
            else {
                up[i][j] = 0;
            }
        }
    }

    // Precompute pow_dk
    for (int u = 1; u <= n; u++) {
        long long d = depth[u];
        pow_dk[u][1] = d % MOD;
        for (int k = 2; k <= 50; k++) {
            pow_dk[u][k] = (1LL * pow_dk[u][k - 1] * d) % MOD;
        }
    }

    // Precompute sum
    for (int k = 1; k <= 50; k++) {
        sum[1][k] = pow_dk[1][k]; // which is 0
        queue<int> q_sum;
        q_sum.push(1);
        while (!q_sum.empty()) {
            int u = q_sum.front(); q_sum.pop();
            for (int v : adj[u]) {
                if (v == parent[u]) continue;
                sum[v][k] = (sum[u][k] + pow_dk[v][k]) % MOD;
                q_sum.push(v);
            }
        }
    }

    int m;
    cin >> m;
    while (m--) {
        int u, v, k;
        cin >> u >> v >> k;
        int l = lca(u, v);
        long long sum_u = sum[u][k];
        long long sum_v = sum[v][k];
        long long sum_l = sum[l][k];
        long long depth_l_pow = pow_dk[l][k];

        long long ans = (sum_u + sum_v) % MOD;
        ans = (ans - (2 * sum_l) % MOD + MOD) % MOD;
        ans = (ans + depth_l_pow) % MOD;
        cout << ans << '\n';
    }

    return 0;
}