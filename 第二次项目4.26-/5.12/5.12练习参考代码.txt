--------------------------------练习2------------------------------
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>
#include <algorithm>
using namespace std;

/*
    build_map 函数：构建字符映射表，将字母映射到对应的数字。
                    使用 fill 函数将 char_map 数组的所有元素初始化为 0，然后分别将对应字母赋值为相应的数字。

    n：存储输入的电话号码数量。
    char_map[256]：用于存储字符到数字的映射关系。
    count   unordered_map<string, int> 类型的容器，用于统计每个标准形式电话号码的出现次数。
        键是标准形式的电话号码，值是该号码出现的次数。
    输入电话号码数量：使用 cin >> n; 读取输入的电话号码数量。
    构建字符映射表：调用 build_map(char_map); 构建字符到数字的映射表。
    处理每个电话号码：
    使用 for 循环遍历每个电话号码。
    对于每个电话号码 s，创建一个新的字符串 converted 用于存储转换后的数字形式。
    遍历电话号码 s 中的每个字符 c：
        如果 c 是连字符 -，则跳过。
        如果 c 是数字，直接将其添加到 converted 中。
        如果 c 是字母，根据 char_map 将其转换为对应的数字并添加到 converted 中。
    将转换后的电话号码格式化为标准形式：string standard = converted.substr(0, 3) + "-" + converted.substr(3, 4);，即前三个字符和后四个字符用连字符连接。
    更新 count 中对应标准形式电话号码的出现次数：count[standard]++;。
    找出重复的电话号码并存储：

    创建一个 vector<pair<string, int>> 类型的容器 res，用于存储重复的电话号码及其出现次数。
    遍历 count 中的每个键值对 p：
    如果 p.second（出现次数）大于等于 2，则将该电话号码及其出现次数以 pair 的形式添加到 res 中。

    如果 res 为空，说明没有重复的电话号码，输出 No duplicates.。
    如果 res 不为空，先对 res 进行排序（sort(res.begin(), res.end());），然后遍历 res，按要求的格式输出每个重复的电话号码及其出现次数。
*/

void build_map(int char_map[]) {
    fill(char_map, char_map + 256, 0);
    char_map['A'] = char_map['B'] = char_map['C'] = '2';
    char_map['D'] = char_map['E'] = char_map['F'] = '3';
    char_map['G'] = char_map['H'] = char_map['I'] = '4';
    char_map['J'] = char_map['K'] = char_map['L'] = '5';
    char_map['M'] = char_map['N'] = char_map['O'] = '6';
    char_map['P'] = char_map['R'] = char_map['S'] = '7';
    char_map['T'] = char_map['U'] = char_map['V'] = '8';
    char_map['W'] = char_map['X'] = char_map['Y'] = '9';
}

int main() {
    int n;
    cin >> n;
    int char_map[256];
    build_map(char_map);
    unordered_map<string, int> count;

    for (int i = 0; i < n; ++i) {
        string s, converted;
        cin >> s;
        for (char c : s) {
            if (c == '-') continue;
            if (isdigit(c)) {
                converted.push_back(c);
            }
            else {
                converted.push_back(char_map[c]);
            }
        }
        string standard = converted.substr(0, 3) + "-" + converted.substr(3, 4);
        count[standard]++;
    }

    vector<pair<string, int>> res;
    for (auto& p : count) {
        if (p.second >= 2) {
            res.emplace_back(p.first, p.second);
        }
    }

    if (res.empty()) {
        cout << "No duplicates." << endl;
    }
    else {
        sort(res.begin(), res.end());
        for (auto& p : res) {
            cout << p.first << " " << p.second << endl;
        }
    }

    return 0;
}
--------------------------------练习1------------------------------

# include<iostream>
# include<cstdio>
# include<cstring>
using namespace std;
/*
*   搞得题解思路：
        用二维数组
        i存跳到第几步
        j存跳到次数
        若跳 f[i][j]=f[i-1][j-1]+s[i]
        若不跳
        f[i][j]=f[i-1][j]
        当跳的次数是t的倍数时
        若不跳
        f[i][j]=f[i-1][j]-s[i]
        若跳 f[i-1][j-1]+s[i]+b[i])
        取最大值
        初始化
        f[i][0]=f[i-1][0]-s[i]
        即一直不跳
        输出f[n]i中最大值
*/

int n, t;
int s[5001], b[5001];
int f[5001][5001];
int main()
{
    cin >> n >> t;
    for (int i = 1; i <= n; i++)
        cin >> s[i];
    for (int i = 1; i <= n; i++)
        cin >> b[i];
    for (int i = 1; i <= n; i++)
        f[i][0] = f[i - 1][0] - s[i];
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= i; j++)
        {
            f[i][j] = max(f[i - 1][j] - s[i], f[i - 1][j - 1] + s[i]);
            if (j % t == 0) f[i][j] = max(f[i - 1][j] - s[i], f[i - 1][j - 1] + s[i] + b[i]);
        }
    int ans = 0;
    for (int i = 1; i <= n; i++)
        ans = max(ans, f[n][i]);
    cout << ans;
    return 0;
}

--------------------------------练习3------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
/*
    定义 Edge 结构体，包含道路两端点 u、v 和道路分值 c，并重载 < 运算符，方便按分值对道路进行排序。
    使用 vector<Edge> 类型的 edges 存储所有道路信息，int 类型的数组 parent 用于并查集操作，初始时每个交叉路口的父节点设为自身。

    交叉路口数量 n 和道路数量 m。
    读取每条道路的两个端点 u、v 和分值 c，将道路信息存入 edges。
    对 edges 进行排序，使得道路按分值从小到大排列。
    使用并查集
        find 用于查找某节点的根节点，采用路径压缩方式，提高后续查找效率。
        unite 用于合并两个节点所在的集合。若两个节点的根节点不同，则将一个根节点设为另一个根节点的父节点；若根节点相同，则说明两节点已在同一集合中，无需合并。

        遍历排序后的 edges。
        对每条道路，尝试用 unite 函数合并其两端点所在集合。若合并成功（即两端点不在同一集合），道路数量 cnt 加 1，并更新已选道路中的最大分值 max_c。
        当已选道路数量达到 n - 1 时（n 个节点构成连通图最少需要 n - 1 条边），停止遍历。

    输出所需道路数量（ n - 1，保证所有交叉路口连通且道路数最少）和已选道路中的最大分值 max_c，满足道路分值最大的道路分值尽量小的要求。
*/
struct Edge {
    int u, v, c;
    bool operator<(const Edge& other) const {
        return c < other.c;
    }
};

vector<Edge> edges;
int parent[305];

int find(int x) {
    if (parent[x] != x) {
        parent[x] = find(parent[x]);
    }
    return parent[x];
}

bool unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return false;
    parent[x] = y;
    return true;
}

int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        int u, v, c;
        cin >> u >> v >> c;
        edges.push_back({ u, v, c });
    }
    sort(edges.begin(), edges.end());

    for (int i = 1; i <= n; ++i) {
        parent[i] = i;
    }

    int max_c = 0, cnt = 0;
    for (Edge& e : edges) {
        if (unite(e.u, e.v)) {
            cnt++;
            max_c = max(max_c, e.c);
            if (cnt == n - 1) break;
        }
    }

    cout << n - 1 << " " << max_c << endl;
    return 0;
}