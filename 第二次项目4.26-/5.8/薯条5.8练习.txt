class Solution {
    vector<pair<int,int>> a;
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        int size = temperatures.size() - 1;
        vector<int> b(size + 1);
        for (int i = size; i >= 0; --i) {
            if (a.empty()) {
                pair<int, int> c(i, temperatures[i]);
                a.push_back(c);
                b[i] = 0;
            }
            else {
                int d = a[a.size() - 1].second;
                int index = a[a.size() - 1].first;
                pair<int, int> c(i, temperatures[i]);
                while (temperatures[i] >= d) {
                    a.pop_back();
                    if (a.empty()) {
                        break;
                    }
                    d = a[a.size() - 1].second;
                    index = a[a.size() - 1].first;
                }
                if (a.empty()) {

                    a.push_back(c);
                    b[i] = 0;
                    continue;
                }
                b[i] = index - i;
                a.push_back(c);
            }
        }
        return b;
    }
};
-------------------------------------------------
class Solution {
public:
    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        unordered_map<int, int> cnt;
        for (int x : nums1) {
            for (int y : nums2) {
                cnt[x + y]++;
            }
        }

        int ans = 0;
        for (int x : nums3) {
            for (int y : nums4) {
                ans += cnt[-x - y];
            }
        }
        return ans;
    }
};
-----------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int target1;
    vector<int> a;
    vector<vector<int>> b;
    int sum=0;
    void dfs(TreeNode* curr){
        if(curr==NULL){
            return ;
        }
        sum+=curr->val;
        a.push_back(curr->val);
        if(curr->left==NULL&&curr->right==NULL&&sum==target1){
            b.push_back(a);
            //return;
        }
       dfs(curr->left);
       dfs(curr->right);
       sum-=curr->val; 
       a.pop_back();
    }
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        target1=targetSum;
        dfs(root);
        return b;
    }
};