---------------------------------------------练习1-------------------------------------------------------
#include<iostream>
#include<vector>

using namespace std;

/*
	这个应该是约瑟夫环吧，那么关键就是除余操作了
	记录轮盘图案顺序，还有每次所转的次数，也就数据多点
	三个轮盘，依次对应三个转次
		可以用三个变量依次记录当前的图案索引，并且每次转后都	%图案数 除余操作，保证不越界
	将每次转的结果都存储起来，并判断加多少分，加到最后结果里去
		这个判断简单点，随便搞搞就行
*/


vector<vector<int>> nums;//三个轮盘的图案数，记录输入的数据
vector<vector<int>> cnt;//每次每个轮盘转的次数
long long counts[3];

int check(int x, int y, int z)
{
	//判定方法1
	if (x == y && y == z && x == z)return 200;
	//判定方法2
	if (x == y || y == z || x == z)return 100;
	//判定方法3
	if (y == x + 1 && z == y + 1)return 200;
	//判定方法4
	int mx = max(x, max(y, z));
	int mn = min(x, min(y, z));
	int md = x + y + z - mx - mn;
	//mx,md,mn为最大值，中间值，最小值
	//mn,md,mx从小到大排序
	if (md == mn + 1 && mx == md + 1)return 100;
	return 0;
}

int main() {
	long long n,m,score=0;//n,m和计数
	cin >> n;

	for (int i = 0; i < 3; ++i) {//载入数据
		vector<int> a;
		for (int j = 0; j < n; ++j) {
			long long nums1;
			cin >> nums1;
			a.push_back(nums1);
		}
		nums.push_back(a);
	}
	cin >> m;//转的次数
	for (int i = 0; i < m; ++i) {
		vector<int> b;
		for (int j = 0; j < 3; ++j) {
			long long cnt1;
			cin >> cnt1;
			b.push_back(cnt1);
		}
		cnt.push_back(b);
	}
	int index[3] = { 0 };
	for (int i = 0; i < m; ++i) {
		index[0] = (index[0] + cnt[i][0]) % n;//记录索引
		index[1] = (cnt[i][1] + index[1]) % n;
		index[2] = (index[2] + cnt[i][2]) % n;
		for (int j = 0; j < 3; ++j) {
			counts[j] = nums[j][index[j]];//存储每轮的图案
		}
		score += check(counts[0],counts[1],counts[2]);//判断图案得分
	}
	cout << score;
	return 0;
}
---------------------------------------------练习2-------------------------------------------------------

#include<iostream>
#include<vector>
#include<algorithm>
#include<math.h>
using namespace std;

/*
		暴力解决，直接把树画出来，根据二叉树的特性，第i棵树左右子树位置，分别是2*i+1,2*i+2
			红色赋值1，黑色赋值-1
		画出来后，根据n,k计算索引，计算方法就是计算该层之前的所有结点数，然后加上k
			然后按照索引直接找到数组数，判断是1还是-1，输出RED还是BLACK
		上面套个m层循环就可以了
		对于太大数不能操作，所以有两个RE
*/

long long m, n, k,Max=-1;//m,n,k,Max方便操作，
vector<long long > nums;


int main() {
	cin >> m;//结点数
	for (int i = 0; i < m; ++i) {
		cin >> n >> k;//行，第几个
		long long  a = 1,count1=n-1,count2=0;
		while (count1) {
			a *= 2;
			count2 += a/2;
			count1--;
		}
		Max = max(count2+k, Max);
		nums.push_back(count2+k);
	}
	vector<long long >numss(99999);//画树
	numss[0]=1;
	for (int i = 0; i < Max; ++i) {
		numss[2 * i + 1] = numss[i];
		numss[2 * i + 2] = -numss[i];
	}
	for (int i = 0; i < nums.size(); ++i) {
		if (numss[nums[i]-1] == 1) {
			cout << "RED" << endl;
		}
		else {
			cout << "BLACK" << endl;
		}
	}
	return 0;
}
---------------------------------------------练习3-------------------------------------------------------

/*
	燃尽了，拿不到全对，题解答案，供参考
		
	本题给出了打乱顺序的 n×m+2 个数。为了方便统计，自然需要对这些数据排序。
	本题中，矩阵中数字的大小其实没有什么作用，只需要统计其个数，而且数据范围为 1≤ai≤5×10^5
  ，非常适合使用计数排序。

矩阵的长和宽都必须在题目给出的 n×m+2 个数之中，只需要一一枚举矩阵的可能长宽即可。
注意，在每次枚举长和宽进行统计时，都需要把长和宽从计数中去掉，以免重复统计。

每次统计的过程如下：对矩阵中全部的 n×m 个数进行全排列，共有 (n×m)！ 种方案。
其中，若有重复的 x 个数，则这 x 个数无论怎么排列都是同一种方案，需要在总方案数上除以 x！ 。注意模意义下的除法需要使用逆元。

多次求阶乘及逆元的过程十分耗时，可以提前进行预处理。
*/
#include <iostream>
#include <vector>
#include <deque>
#include <map>
using namespace std;
int sum;
int scale;
int x;
long long bucket[500007];
long long jc[500007] = { 1 };
long long invjc[500007] = {};
long long ans = 0;
const long long mod = 1000000007ll;

long long qpow(long long a, long long b)
{
	long long res = 1;
	while (b)
	{
		if (b & 1)
			res = res * a % mod;
		a = a * a % mod;
		b >>= 1;
	}
	return res;
}

long long inv(long long x)
{
	return qpow(x, mod - 2);
}

int main()
{
	cin >> sum;
	scale = sum - 2;
	for (long long i = 1; i <= 500000; i++)
	{
		jc[i] = jc[i - 1] * i % mod;
	}
	for (int i = 0; i <= 500000; i++)
	{
		invjc[i] = inv(jc[i]);
	}
	for (int i = 1; i <= sum; i++)
	{
		cin >> x;
		bucket[x]++;
	}
	for (int i = 1; i <= scale; i++)
	{
		if (scale % i == 0 && bucket[i] && bucket[scale / i])
		{
			int n = i, m = scale / i;
			bucket[n]--;
			bucket[m]--;
			long long now = jc[scale];
			for (int j = 1; j <= 500000; j++)
				if (bucket[j])
					now = now * invjc[bucket[j]] % mod;
			ans = (ans + now) % mod;
			bucket[n]++;
			bucket[m]++;
		}
	}
	cout << ans << endl;
	return 0;
}
/*
	技术官做得大体思路：
	知道要行列要去重后可以使用map容器，
	知道阶乘也要去重后要知道，阶乘后除以重复数就是最后结果，那么就有了
	但这个容易超时，只过了几个，不浪费时间优化了
*/
#include<iostream>
#include<vector>
#include<map>
#include<math.h>

using namespace std;

long long n, m, counts, count1, result = 0, Max = -1;

long long num[500001] = { 0 };
map<pair<long long, long long >, long long > Map;
long long count2 = 0;//map数量

long long  jiecheng(long long a) {
	long long b = a, c = 1;
	a--;
	while (a > 0) {
		b *= a;
		a--;
	}
	return b;
}

int main() {
	cin >> counts;
	vector<long long > nums(counts);

	//memset(num, 0, sizeof(long long) * 50001);
	for (int i = 0; i < counts; ++i) {
		long long  a;
		cin >> a;
		nums[i] = a;
		Max = max(Max, a);

		num[a]++;
		count1++;
		if (num[a] > 1) {
			count1--;//种类数
		}
	}
	for (int i = 0; i < nums.size(); ++i) {//遍历所有的数
		for (int j = 0; j < nums.size(); ++j) {
			if (i == j) continue;//跳过自身
			if (nums[i] * nums[j] == counts - 2) {

				int count3 = count2;
				Map.insert(make_pair(make_pair(nums[i], nums[j]), i));
				count2 = Map.size();
				if (count3 == count2) continue;

				num[nums[i]] -= 1;
				num[nums[j]] -= 1;

				long long all = 0;
				for (int k = 0; k <= Max; ++k) {
					if (num[k] != 0) {
						all += num[k];
					}
				}

				all = jiecheng(all);
				for (int k = 0; k <= Max; ++k) {
					if (num[k] != 0) {
						all /= num[k];
					}
				}
				result += all;

				num[nums[i]] += 1;
				num[nums[j]] += 1;
			}
		}
	}
	cout << result << endl;

	return 0;
}
