--------------------------------------------------练习1----------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;
/*
    暴力搜索
    枚举所有可能的最终灯状态，满足按钮操作次数和亮灭约束。
    每个按钮按奇数次等效按1次，偶数次等效按0次，故只需枚举每个按钮按0或1次。
    总操作次数需满足：总按次数 ≤ c 且与 c 奇偶性相同（多余次数可通过无效操作补足）。
    枚举所有按钮按下的组合（共 2^4 = 16 种可能）。
    对每种组合生成灯状态，检查是否满足输入给出的亮灭约束。
    去重排序,用集合存储合法状态，最后排序输出。
*/
int main() {
    int n, c;
    cin >> n >> c;

    vector<int> lights_on;
    int x;
    while (cin >> x && x != -1) {
        lights_on.push_back(x);
    }

    vector<int> lights_off;
    while (cin >> x && x != -1) {
        lights_off.push_back(x);
    }

    vector<int> mask1(n, 1);

    vector<int> mask2(n, 0);
    for (int i = 0; i < n; ++i) {
        if ((i + 1) % 2 == 1) {
            mask2[i] = 1;
        }
    }

    vector<int> mask3(n, 0);
    for (int i = 0; i < n; ++i) {
        if ((i + 1) % 2 == 0) {
            mask3[i] = 1;
        }
    }

    vector<int> mask4(n, 0);
    for (int i = 0; i < n; ++i) {
        if ((i + 1) % 3 == 1) {
            mask4[i] = 1;
        }
    }

    set<string> possible_states;

    for (int a1 = 0; a1 <= 1; ++a1) {
        for (int a2 = 0; a2 <= 1; ++a2) {
            for (int a3 = 0; a3 <= 1; ++a3) {
                for (int a4 = 0; a4 <= 1; ++a4) {
                    int k = a1 + a2 + a3 + a4;
                    if (k > c || (c - k) % 2 != 0) {
                        continue;
                    }

                    vector<int> total_mask(n, 0);
                    if (a1) {
                        for (int i = 0; i < n; ++i) {
                            total_mask[i] ^= mask1[i];
                        }
                    }
                    if (a2) {
                        for (int i = 0; i < n; ++i) {
                            total_mask[i] ^= mask2[i];
                        }
                    }
                    if (a3) {
                        for (int i = 0; i < n; ++i) {
                            total_mask[i] ^= mask3[i];
                        }
                    }
                    if (a4) {
                        for (int i = 0; i < n; ++i) {
                            total_mask[i] ^= mask4[i];
                        }
                    }

                    vector<int> state(n);
                    for (int i = 0; i < n; ++i) {
                        state[i] = 1 ^ total_mask[i];
                    }

                    bool valid = true;
                    for (int x : lights_on) {
                        if (state[x - 1] != 1) {
                            valid = false;
                            break;
                        }
                    }
                    if (!valid) continue;

                    for (int x : lights_off) {
                        if (state[x - 1] != 0) {
                            valid = false;
                            break;
                        }
                    }
                    if (!valid) continue;

                    string s;
                    for (int bit : state) {
                        s += (bit ? '1' : '0');
                    }
                    possible_states.insert(s);
                }
            }
        }
    }

    if (possible_states.empty()) {
        cout << "IMPOSSIBLE" << endl;
    }
    else {
        vector<string> sorted(possible_states.begin(), possible_states.end());
        sort(sorted.begin(), sorted.end());
        for (const string& s : sorted) {
            cout << s << endl;
        }
    }

    return 0;
}
--------------------------------------------------练习2----------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

/*
    思路：区间合并去重
    要计算多个区间覆盖的总长度。由于区间可能存在重叠或相邻，直接累加会导致重复计算。
        将所有区间按起点升序排列。排序后，相邻区间的位置关系明确，便于合并操作。
        初始化当前合并区间为第一个区间，依次遍历后续每个区间：
            若当前遍历区间的起点 ≤ 当前合并区间的终点，说明两区间有重叠或相邻，合并为一个更大的区间（终点取两者最大值）。
            若不相交，则将当前合并区间保存，并更新为新的遍历区间。
    统计总长度：合并完成后，所有区间彼此独立且不重叠，直接累加每个区间的长度（终点-起点）即为答案。
*/
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;

    vector<pair<long long, long long>> intervals;
    for (int i = 0; i < n; ++i) {
        long long a, b;
        cin >> a >> b;
        intervals.emplace_back(a, b);
    }

    sort(intervals.begin(), intervals.end());

    vector<pair<long long, long long>> merged;
    long long current_start = intervals[0].first;
    long long current_end = intervals[0].second;

    for (size_t i = 1; i < intervals.size(); ++i) {
        long long a = intervals[i].first;
        long long b = intervals[i].second;

        if (a <= current_end) {
            current_end = max(current_end, b);
        }
        else {
            merged.emplace_back(current_start, current_end);
            current_start = a;
            current_end = b;
        }
    }

    merged.emplace_back(current_start, current_end);

    long long total = 0;
    for (const auto& p : merged) {
        total += p.second - p.first;
    }

    cout << total << endl;

    return 0;
}
--------------------------------------------------练习3----------------------------------------------
#include <iostream>
#include <vector>
using namespace std;
/*
    动态规划,01背包问题
        在容量 V 的箱子中装入物品，使总体积最大。剩余空间即为 V - 最大体积。
        状态dp[j] 表示容量为 j 时能装入的最大体积。
        状态转移方程思路：
            逆序遍历容量（从 V 到物品体积 v），确保每个物品只被选取一次。
            dp[j] = max(dp[j], dp[j - v] + v)。
        最终 dp[V] 为最大装入体积，剩余空间为 V - dp[V]。
*/
int main() {
    int V, n;
    cin >> V >> n;
    vector<int> volumes(n);
    for (int i = 0; i < n; ++i) {
        cin >> volumes[i];
    }

    vector<int> dp(V + 1, 0); // 初始化dp数组，表示容量为j时的最大装入体积

    for (int v : volumes) {
        // 逆序遍历防止重复选取
        for (int j = V; j >= v; --j) {
            // 更新当前容量下的最大体积
            if (dp[j - v] + v > dp[j]) {
                dp[j] = dp[j - v] + v;
            }
        }
    }

    cout << V - dp[V] << endl; // 剩余空间 = 总容量 - 最大装入体积
    return 0;
}