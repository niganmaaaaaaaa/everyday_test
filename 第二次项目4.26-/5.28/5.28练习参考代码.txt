-------------------------练习1------------------------
/*
	dijkstra算法，配合邻接矩阵使用效果更好
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int n;
int dist[1001];
int f[1001][1001];
bool vis[1001];
int cnt[1001];
void dijkstra()
{
    for(int i=1;i<=n;i++)
    {
        int u,t=2100000000;
        for(int j=1;j<=n;j++)
        {
            if(!vis[j]&&dist[j]<t)
            {
                u=j;
                t=dist[j];
            }
        }
        if(t==2100000000)break;
        vis[u]=true;
        for(int j=1;j<=n;j++)
        {
            if(!f[u][j])continue;
            if(!vis[j])continue;
            if(dist[f[u][j]]>t+dist[j])
            {
                dist[f[u][j]]=t+dist[j];
                cnt[f[u][j]]=cnt[u]*cnt[j];
            }
            else if(dist[f[u][j]]==t+dist[j])
            cnt[f[u][j]]+=cnt[u]*cnt[j];
        }
    }
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    scanf("%d",&dist[i]),cnt[i]=1;
    int u,v,t;
    while(scanf("%d%d%d",&u,&v,&t)!=EOF)
    {
        f[u+1][v+1]=t+1;
        f[v+1][u+1]=t+1;
    }
    dijkstra();
    printf("%d %d",dist[1],cnt[1]);
    return 0;
}
-------------------------练习2------------------------
/*
	没什么思路，参考题解吧https://www.luogu.com.cn/problem/solution/P11999
*/

#include <bitset>
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;
template <typename T1, typename T2> using umap = unordered_map<T1, T2>;
inline string get(string s, int fr, int to) {
    string tmp = "";
    for (int i = fr; i <= to; i++) tmp.push_back(s[i]);
    return tmp;
}
int main() {
    int t;
    cin >> t;
    while (t--) {
        string s, t;
        cin >> s >> t;
        int k, n = s.size(), m = t.size();
        t = t + "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
        cin >> k;
        umap<string, char> mp;
        for (int i = 0; i < (1 << n); i++) {
            if (__builtin_popcount(i >> (k - 1)) != (n - m)) continue;
            // cout << bitset<7>(i) << endl;
            mp.clear();
            int pnt = k;
            for (int j = k; j <= n; j++) {
                string nw = get(s, j - k, j - 1);
                if (i & (1 << (j - 1))) {
                    if (mp[nw] && mp[nw] != '*') goto FAIL;
                    mp[nw] = '*';
                    continue;
                }
                if (mp[nw] && (mp[nw] != t[pnt - 1])) goto FAIL;
                mp[nw] = t[(pnt++) - 1];
            }
            cout << mp.size() << endl;
            for (auto it : mp) {
                if (it.second != '*') cout << "(" << it.first << "," << it.second << ")" << endl;
                else cout << "(" << it.first << "," << ")" << endl;
            }
            break;
        FAIL:;
        }
    }
}
-------------------------练习3------------------------
/*
	很明显这是一个斐波那契数列
	找规律就可以了
	重要的是判断存在是否合理
		这个可以参考这个比较清晰https://www.luogu.com.cn/article/sgymh0mi
*/

#include<bits/stdc++.h>
#define ll long long
using namespace std;
ll T,a,b,p,x,f[21]={0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765}; //为防止取余时溢出，全开long long
int main(){
	cin>>T;
	while(T--){
		cin>>a>>x>>b;
		if((x-f[a-1])%f[a]!=0) cout<<-1<<endl; 
		else{
			p=(x-f[a-1])/f[a]; //套用推出的公式
			cout<<p*f[b]+f[b-1]<<endl;
		}
	}
	return 0;
}

