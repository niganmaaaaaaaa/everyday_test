--------------------------练习1-----------------------------
/*
	没设么思路，直接看的题解
	用并查集解决，并查集也不太熟练
	建议看题解：https://www.luogu.com.cn/article/5ms14nnw
*/
#include<bits/stdc++.h>
#define mkp(a,b) make_pair(a,b)
using namespace std;

const int N=5e5+5;

queue<pair<int,int> > e[N];// 细节要存id，方便后面找补集
int n,m;
int deg[N];
bool used[N];
int f[N],cnt,ecnt;
int find(int x){return f[x]==x?x:f[x]=find(f[x]);}// 并查集维护连通块
bool untie(int u,int v){int fu=find(u),fv=find(v);if(fu==fv)return 0;f[fu]=fv,deg[u]++,deg[v]++,cnt--;return 1;}
int main(){
	cin>>n>>m;cnt=n;
	for(int i=1;i<=m;i++){
		int u,v;
		cin>>u>>v;
		e[u].push(mkp(v,i));
		e[v].push(mkp(u,i)); //存边
	}
  for(int i=1;i<=n;i++){
    f[i]=i;
  }
//	cout<<q.top().first<<' '<<cnt<<'\n';
	for(int now=1;now<=n;now++){
		if(deg[now]>0)continue;
		pair<int,pair<int,int> > res=mkp(1e9,mkp(0,0));
		for(int i=1;i<=e[now].size();i++){
			int k=e[now].front().first,id=e[now].front().second;
			e[now].push(e[now].front());e[now].pop();
			if(!used[id]){
				res=min(res,mkp(deg[k],mkp(k,id)));// 挑边
			}
		}
		used[res.second.second]=1;
		untie(now,res.second.first);
		ecnt++;//记录使用了的边的数量
	}
	if(cnt==1)cout<<-1; //无解情况
	else{
		cout<<(m-ecnt)<<'\n';
		for(int i=1;i<=n;i++){
			while(!e[i].empty()){
				int j=e[i].front().first,id=e[i].front().second;e[i].pop();
				if(!used[id]){
					used[id]=1;
					cout<<i<<' '<<j<<'\n';
				}
			}
		}
	}
	return 0;
}
--------------------------练习2-----------------------------
/*
	建议看题解：https://www.luogu.com.cn/article/v4q2o00b
*/
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int mod=1e9+7;
int T,n,m,jc[2000006],inv[2000005];//jc表示阶乘，inv表示逆元
int qpow(int a,int b){//快速幂
    int ans=1;
    while(b){
        if(b&1) ans=ans*a%mod;
        b>>=1;
        a=a*a%mod;
    }
    return ans;
}
int c(int n,int m){return jc[n]*inv[n-m]%mod*inv[m]%mod;}//求组合的函数
signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin>>T;
    jc[0]=1;
    for(int i = 1;i<=2000000;i++) jc[i]=jc[i-1]*i%mod;//求阶乘
    inv[2000000]=qpow(jc[2000000],mod-2);//费马小定理
    for(int i = 1999999;i>=0;i--) inv[i]=inv[i+1]*(i+1)%mod;//这里用到了线性求逆元
    while(T--){
        cin>>n>>m;
        if(!n&&!m){
            cout<<"1\n";
            continue;
        }
        cout<<(c(n+m,n)+(n+m-1)*c(n+m-2,n-1)%mod*2%mod)%mod<<'\n';//记得多加几个mod
    }
    return 0;
}
--------------------------练习3-----------------------------
/*
如果 b < p - a，说明操作次数不足以将 a 减至 0，因此 a 保持原值，b 也保持原值。
否则，操作次数足够将 a 减至 0，此时 a 变为 0，剩余的 b 为 (b - p + a) % p。
*/
#include<bits/stdc++.h>
using namespace std;
#define int long long
int a,b,p;
signed main(){
	ios::sync_with_stdio(false);
	cin.tie(0);cout.tie(0);
	cin>>a>>b>>p;
	if(b<p-a)cout<<a<<" "<<b;
	else cout<<0<<" "<<((b-p+a)%p) ;
	return 0;
}